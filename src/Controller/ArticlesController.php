<?php
namespace App\Controller;

use App\Controller\AppController;
use App\Model\Table\TagsTable;

/**
 * Articles Controller
 *
 * @property \App\Model\Table\ArticlesTable $Articles
 *
 * @method \App\Model\Entity\Article[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ArticlesController extends AppController
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        // ArticlesControllerのみtagsメソッドを許可
        $this->Auth->allow(['tags']);
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|void
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Users']
        ];
        // Articlesモデルに紐付くテーブルからデータをページ分けして取得
        $articles = $this->paginate($this->Articles);

        // Viewにデータ($articelsの値)を渡す($articlesという名前でctp側でそのまま使える)
        $this->set(compact('articles'));
    }

    /**
     * View method
     *
     * @param string|null $slug Article $slug.
     * @return \Cake\Http\Response|void
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($slug = null)
    {
//        $article = $this->Articles->get($id, [
//            'contain' => ['Users', 'Tags']
//        ]);
        //findBySlug = 動的ファインダー
        $article = $this->Articles->findBySlug($slug)->firstOrFail();

        $this->set('article', $article);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add() // post と post以外両方に対応している(多分分けるべき->単一責任原則に反する)
    {
        $article = $this->Articles->newEntity();

        //postだった場合の処理
        if ($this->request->is('post')) {

            //リクエストデータをArticleEntityに変換(レコードを表す)
            $article = $this->Articles->patchEntity($article, $this->request->getData());

            $article->user_id = $this->Auth->user('id');

            //ArticleEntityをArticlesTableのsaveメソッドで永続化(insert or update はisNewで判断)
            if ($this->Articles->save($article)) {
                //Flach = セッションにメッセージを書き込む
                $this->Flash->success(__('The article has been saved.'));

                return $this->redirect(['action' => 'index']);
            }

            $this->Flash->error(__('The article could not be saved. Please, try again.'));
        }
        //postでなかった場合の処理
        $tags = $this->Articles->Tags->find('list');
//        $tags = [
//            'a' => '山田',
//            'b' => '砂糖',
//            'c' => '鈴木'
//        ];
//        $users = $this->Articles->Users->find('list', ['limit' => 200]);
//        $tags = $this->Articles->Tags->find('list', ['limit' => 200]);
//        $this->set(compact('article', 'users', 'tags'));
        $this->set(compact('tags','article'));
//        $this->set('article', $article);
    }

    /**
     * Edit method
     *
     * @param string|null $id Article id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($slug)
    {
        $article = $this->Articles->findBySlug($slug)->contain('Tags')->firstOrFail();

        if ($this->request->is(['patch', 'post', 'put'])) {
            $article = $this->Articles->patchEntity($article, $this->request->getData(),[
                // editの時はuser_idへの代入を禁止する
                'accessibleFields' => ['user_id' => false]
            ]);
            if ($this->Articles->save($article)) {
                $this->Flash->success(__('The article has been saved.'));

                return $this->redirect(['action' => 'view',$article->slug]);
            }
            $this->Flash->error(__('The article could not be saved. Please, try again.'));
        }
//        $users = $this->Articles->Users->find('list', ['limit' => 200]);
//        $tags = $this->Articles->Tags->find('list', ['limit' => 200]);
        $tags = $this->Articles->Tags->find('list');

        $this->set(compact('article','tags','allTags'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Article id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($slug)
    {
        $this->request->allowMethod(['post', 'delete']);
        $article = $this->Articles->findBySlug($slug)->firstOrFail();
        if ($this->Articles->delete($article)) {
            $this->Flash->success(__('The article has been deleted.'));
        } else {
            $this->Flash->error(__('The article could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

    public function tags()
    {
        $tags = $this->request->getParam('pass');//パラメータが配列で格納される

        $articles = $this->paginate($this->Articles->find('tagged', [
            'tags' => $tags
        ]));

        $this->set(compact('tags','articles'));
    }

    // 親クラスの同名メソッドをオーバーライド
    // 戻り値をはbool
    public function isAuthorized($user)
    {
        $action = $this->request->getParam('action');

        // indexやviewはallowメソッドで既にOK

        // add,tagsメソッドなら認証中ユーザーならOK
        if(in_array($action,['add','tags'])){
            return true;
        }

        // edit,deleteはslugがなければダメ
        $slug = $this->request->getParam('pass.0');// /controller/action/pass.0/pass.1/...
        if(!$slug){
            return false;
        }

        // slugをキーに記事を取得
        $article = $this->Articles->findBySlug($slug)->first();

        // 記事が$userのものであればtrueを返す(OK)
        // ControllerAuthorizeクラスがisAuthorizedの戻り値を使う
        return $article->user_id === $user['id'];

    }
}
